/* Generated by D:\Document\EDUKASI\MAGANG\LEN\OpenDDS-Java\OpenDDS-3.28.1\bin\opendds_idl version 3.28.1 (ACE version 6.5.20) running on input file HelloWorld.idl */
#include "HelloWorldTypeSupportImpl.h"

#include <cstring>
#include <stdexcept>
#include "dds/DCPS/FilterEvaluator.h"
#include "dds/DCPS/PoolAllocator.h"

#ifdef OPENDDS_IDL_FILE_SPECIFIC
#  undef OPENDDS_IDL_FILE_SPECIFIC
#endif
#define OPENDDS_IDL_FILE_SPECIFIC(base, index) opendds_idl_generated_helloworldtypesupportimpl_cpp_6mfuw0##_##base##index



/* Begin MODULE: CORBA */


/* End MODULE: CORBA */


/* Begin MODULE: HelloWorld */



/* Begin STRUCT: Message */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> const XTypes::TypeIdentifier& getMinimalTypeIdentifier<HelloWorld_Message_xtag>()
{
  static XTypes::TypeIdentifier ti;
  ACE_GUARD_RETURN(ACE_Thread_Mutex, guard, TheServiceParticipant->get_static_xtypes_lock(), ti);
  if (ti.kind() == XTypes::TK_NONE) {
    ti = XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(124, 75, 78, 75, 13, 71, 32, 208, 128, 25, 34, 150, 22, 156));
  }
  return ti;
}

static const XTypes::TypeMap& OPENDDS_IDL_FILE_SPECIFIC(get_minimal_type_map, 0)();
template<> const XTypes::TypeMap& getMinimalTypeMap<HelloWorld_Message_xtag>()
{
  return OPENDDS_IDL_FILE_SPECIFIC(get_minimal_type_map, 0)();
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool vread(OpenDDS::DCPS::ValueReader& value_reader,  ::HelloWorld::Message& value)
{
  ACE_UNUSED_ARG(value_reader);
  ACE_UNUSED_ARG(value);
  static const ListMemberHelper::Pair pairs[] = {{"id",0},{"text",1},{0,0}};
  ListMemberHelper helper(pairs);
  if (!value_reader.begin_struct(OpenDDS::DCPS::APPENDABLE)) return false;
  XTypes::MemberId member_id;
  while (value_reader.members_remaining()) {
    if (!value_reader.begin_struct_member(member_id, helper)) return false;
    switch (member_id) {
    case 0: {
      if (!value_reader.read_int32(value.id)) return false;
      break;
    }
    case 1: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.text = x.c_str();
      }
      break;
    }
    }
    if (!value_reader.end_struct_member()) return false;
  }
  if (!value_reader.end_struct()) return false;
  return true;
}

bool vread(OpenDDS::DCPS::ValueReader& value_reader, const NestedKeyOnly< ::HelloWorld::Message>& value)
{
  ACE_UNUSED_ARG(value_reader);
  ACE_UNUSED_ARG(value);
  static const ListMemberHelper::Pair pairs[] = {{"id",0},{"text",1},{0,0}};
  ListMemberHelper helper(pairs);
  if (!value_reader.begin_struct(OpenDDS::DCPS::APPENDABLE)) return false;
  XTypes::MemberId member_id;
  while (value_reader.members_remaining()) {
    if (!value_reader.begin_struct_member(member_id, helper)) return false;
    switch (member_id) {
    case 0: {
      if (!value_reader.read_int32(value.value.id)) return false;
      break;
    }
    case 1: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.value.text = x.c_str();
      }
      break;
    }
    }
    if (!value_reader.end_struct_member()) return false;
  }
  if (!value_reader.end_struct()) return false;
  return true;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const  ::HelloWorld::Message& value)
{
  ACE_UNUSED_ARG(value_writer);
  ACE_UNUSED_ARG(value);
  if (!value_writer.begin_struct(OpenDDS::DCPS::APPENDABLE)) {
    return false;
  }
  if (!value_writer.begin_struct_member(MemberParam(0, false, "id", false, true))) {
    return false;
  }
  if (!value_writer.write_int32(value.id)) {
    return false;
  }
  if (!value_writer.end_struct_member()) {
    return false;
  }
  if (!value_writer.begin_struct_member(MemberParam(1, false, "text", false, true))) {
    return false;
  }
  if (!value_writer.write_string(value.text)) {
    return false;
  }
  if (!value_writer.end_struct_member()) {
    return false;
  }
  return value_writer.end_struct();
}

bool vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const NestedKeyOnly<const  ::HelloWorld::Message>& value)
{
  ACE_UNUSED_ARG(value_writer);
  ACE_UNUSED_ARG(value);
  if (!value_writer.begin_struct(OpenDDS::DCPS::APPENDABLE)) {
    return false;
  }
  if (!value_writer.begin_struct_member(MemberParam(0, false, "id", false, true))) {
    return false;
  }
  if (!value_writer.write_int32(value.value.id)) {
    return false;
  }
  if (!value_writer.end_struct_member()) {
    return false;
  }
  if (!value_writer.begin_struct_member(MemberParam(1, false, "text", false, true))) {
    return false;
  }
  if (!value_writer.write_string(value.value.text)) {
    return false;
  }
  if (!value_writer.end_struct_member()) {
    return false;
  }
  return value_writer.end_struct();
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> void set_default( ::HelloWorld::Message& stru)
{
  ACE_UNUSED_ARG(stru);
  stru.id = 0;
  stru.text = "";
}

void serialized_size(const Encoding& encoding, size_t& size, const ::HelloWorld::Message& stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size_delimiter(encoding, size);
  }
  primitive_serialized_size(encoding, size, stru.id);
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.text.in()) + 1;
}

bool operator<<(Serializer& strm, const ::HelloWorld::Message& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size(encoding, total_size, stru);
    if (!strm.write_delimiter(total_size)) {
      return false;
    }
  }
  return (strm << stru.id)
    && (strm << stru.text.in());
}

bool operator>>(Serializer& strm,  ::HelloWorld::Message& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  bool reached_end_of_struct = false;
  ACE_UNUSED_ARG(reached_end_of_struct);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      return false;
    }
  }
  const size_t end_of_struct = strm.rpos() + total_size;

  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.id = 0;
  } else {
    if (!(strm >> stru.id)) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.text = "";
  } else {
    if (!(strm >> stru.text.out())) {
      return false;
    }
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() < end_of_struct) {
    strm.skip(end_of_struct - strm.rpos());
  }
  return true;
}

void serialized_size(const Encoding& encoding, size_t& size, const NestedKeyOnly<const ::HelloWorld::Message>& stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size_delimiter(encoding, size);
  }
  primitive_serialized_size(encoding, size, stru.value.id);
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.value.text.in()) + 1;
}

bool operator<<(Serializer& strm, const NestedKeyOnly<const ::HelloWorld::Message>& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size(encoding, total_size, stru);
    if (!strm.write_delimiter(total_size)) {
      return false;
    }
  }
  return (strm << stru.value.id)
    && (strm << stru.value.text.in());
}

bool operator>>(Serializer& strm, const NestedKeyOnly< ::HelloWorld::Message>& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  bool reached_end_of_struct = false;
  ACE_UNUSED_ARG(reached_end_of_struct);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      return false;
    }
  }
  const size_t end_of_struct = strm.rpos() + total_size;

  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.id = 0;
  } else {
    if (!(strm >> stru.value.id)) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.text = "";
  } else {
    if (!(strm >> stru.value.text.out())) {
      return false;
    }
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() < end_of_struct) {
    strm.skip(end_of_struct - strm.rpos());
  }
  return true;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl< ::HelloWorld::Message> : MetaStruct {
  typedef  ::HelloWorld::Message T;

#ifndef OPENDDS_NO_MULTI_TOPIC
  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }

  size_t numDcpsKeys() const { return 0; }

#endif /* OPENDDS_NO_MULTI_TOPIC */

  Value getValue(const void* stru, const char* field) const
  {
    const ::HelloWorld::Message& typed = *static_cast<const ::HelloWorld::Message*>(stru);
    ACE_UNUSED_ARG(typed);
    if (std::strcmp(field, "id") == 0) {
      return typed.id;
    }
    if (std::strcmp(field, "text") == 0) {
      return typed.text.in();
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::HelloWorld::Message)");
  }

  Value getValue(Serializer& strm, const char* field, const TypeSupportImpl* = 0) const
  {
    const Encoding& encoding = strm.encoding();
    ACE_UNUSED_ARG(encoding);
    size_t total_size = 0;
    if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
      if (!strm.read_delimiter(total_size)) {
        throw std::runtime_error("Unable to reader delimiter in getValue");
      }
    }
    std::string base_field = field;
    const size_t index = base_field.find('.');
    std::string subfield;
    if (index != std::string::npos) {
      subfield = base_field.substr(index + 1);
      base_field = base_field.substr(0, index);
    }
    if (base_field == "id") {
      ACE_CDR::Long val;
      if (!(strm >> val)) {
        throw std::runtime_error("Field 'id' could not be deserialized");
      }
      return val;
    } else {
      if (!strm.skip(1,  4 )) {
        throw std::runtime_error("Field 'id' could not be skipped");
      }
    }
    if (base_field == "text") {
      TAO::String_Manager val;
      if (!(strm >> val.out())) {
        throw std::runtime_error("Field 'text' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(strm >> len)) {
        throw std::runtime_error("String 'text' length could not be deserialized");
      }
      if (!strm.skip(len)) {
        throw std::runtime_error("String 'text' contents could not be skipped");
      }
    }
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Did not find field in getValue");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strcmp(field, "id") == 0) {
      return make_field_cmp(&T::id, next);
    }
    if (std::strcmp(field, "text") == 0) {
      return make_field_cmp(&T::text, next);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::HelloWorld::Message)");
  }

#ifndef OPENDDS_NO_MULTI_TOPIC
  const char** getFieldNames() const
  {
    static const char* names[] = {"id", "text", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "id") == 0) {
      return &static_cast<const T*>(stru)->id;
    }
    if (std::strcmp(field, "text") == 0) {
      return &static_cast<const T*>(stru)->text;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::HelloWorld::Message)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "id") == 0) {
      static_cast<T*>(lhs)->id = *static_cast<const  ::CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "text") == 0) {
      static_cast<T*>(lhs)->text = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::HelloWorld::Message)");
  }

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    if (std::strcmp(field, "id") == 0) {
      return static_cast<const T*>(lhs)->id == static_cast<const T*>(rhs)->id;
    }
    if (std::strcmp(field, "text") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->text.in(), static_cast<const T*>(rhs)->text.in());
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::HelloWorld::Message)");
  }
#endif /* OPENDDS_NO_MULTI_TOPIC */

};

template<>
const MetaStruct& getMetaStruct< ::HelloWorld::Message>()
{
  static MetaStructImpl< ::HelloWorld::Message> msi;
  return msi;
}

bool gen_skip_over(Serializer& ser,  ::HelloWorld::Message*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl< ::HelloWorld::Message>().getValue(ser, "");
  return true;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif // ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace XTypes {

#ifndef OPENDDS_SAFETY_PROFILE
#if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
template <>
class DynamicDataAdapterImpl< ::HelloWorld::Message,  ::HelloWorld::Message > : public DynamicDataAdapter_T< ::HelloWorld::Message> {
public:
  DynamicDataAdapterImpl(DDS::DynamicType_ptr type,  ::HelloWorld::Message& value)
    : DynamicDataAdapter_T< ::HelloWorld::Message>(type, value)
  {
  }

  DynamicDataAdapterImpl(DDS::DynamicType_ptr type, const  ::HelloWorld::Message& value)
    : DynamicDataAdapter_T< ::HelloWorld::Message>(type, value)
  {
  }

  DDS::UInt32 get_item_count()
  {
    return 2;
  }

  DDS::DynamicData_ptr clone()
  {
    return new DynamicDataAdapterImpl(type_, value_);
  }

  bool serialized_size(const OpenDDS::DCPS::Encoding& enc, size_t& size, OpenDDS::DCPS::Sample::Extent ext) const
  {
    using namespace OpenDDS::DCPS;
    if (ext == Sample::Full) {
      DCPS::serialized_size(enc, size, value_);
    } else if (ext == Sample::NestedKeyOnly) {
      const NestedKeyOnly<const  ::HelloWorld::Message> nested_key_only(value_);
      DCPS::serialized_size(enc, size, nested_key_only);
    } else {
      return false; // Non-topic type
    }
    return true;
  }

  bool serialize(OpenDDS::DCPS::Serializer& ser, OpenDDS::DCPS::Sample::Extent ext) const
  {
    using namespace OpenDDS::DCPS;
    if (ext == Sample::Full) {
      return ser << value_;
    } else if (ext == Sample::NestedKeyOnly) {
      NestedKeyOnly<const  ::HelloWorld::Message> nested_key_only(value_);
      return ser << nested_key_only;
    } else {
      return false; // Non-topic type
    }
  }

protected:
  DDS::ReturnCode_t get_raw_value(const char* method, void* dest, DDS::TypeKind tk, DDS::MemberId id)
  {
    switch (id) {
    case 0:
      {
        return get_simple_raw_value(method, dest, tk, value_.id, id);
      }
    case 1:
      {
        return get_s8_raw_value(method, dest, tk, value_.text, id);
      }
    default:
      return invalid_id(method, id);
    }
  }

  DDS::ReturnCode_t set_raw_value(const char* method, DDS::MemberId id, const void* source, DDS::TypeKind tk)
  {
    DDS::ReturnCode_t rc = assert_mutable(method);
    if (rc != DDS::RETCODE_OK) {
      return rc;
    }
    switch (id) {
    case 0:
      {
        return set_simple_raw_value(method, value_.id, id, source, tk);
      }
    case 1:
      {
        return set_s8_raw_value(method, value_.text.inout(), id, source, tk);
      }
    default:
      return invalid_id(method, id);
    }
  }
};

#endif // if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER

template <>
DDS::DynamicData_ptr get_dynamic_data_adapter< ::HelloWorld::Message,  ::HelloWorld::Message>(DDS::DynamicType_ptr type, const  ::HelloWorld::Message& value)
{
#  if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
  if (type) {
    return new DynamicDataAdapterImpl< ::HelloWorld::Message,  ::HelloWorld::Message>(type, value);
  }
#  else
  ACE_UNUSED_ARG(type);
  ACE_UNUSED_ARG(value);
#  endif
  return 0;
}

template <>
DDS::DynamicData_ptr get_dynamic_data_adapter< ::HelloWorld::Message,  ::HelloWorld::Message>(DDS::DynamicType_ptr type,  ::HelloWorld::Message& value)
{
#  if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
  if (type) {
    return new DynamicDataAdapterImpl< ::HelloWorld::Message,  ::HelloWorld::Message>(type, value);
  }
#  else
  ACE_UNUSED_ARG(type);
  ACE_UNUSED_ARG(value);
#  endif
  return 0;
}

template <>
const  ::HelloWorld::Message* get_dynamic_data_adapter_value< ::HelloWorld::Message,  ::HelloWorld::Message>(DDS::DynamicData_ptr dd)
{
  ACE_UNUSED_ARG(dd);
#  if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
  typedef DynamicDataAdapterImpl< ::HelloWorld::Message,  ::HelloWorld::Message> Dda;
  const Dda* const dda = dynamic_cast<Dda*>(dd);
  if (dda) {
    return &dda->wrapped();
  }
#  endif
  return 0;
}
#endif // ifndef OPENDDS_SAFETY_PROFILE

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End STRUCT: Message */

/* End MODULE: HelloWorld */
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

namespace {
XTypes::TypeObject OPENDDS_IDL_FILE_SPECIFIC(minimal_to, 0)()
{
  static const unsigned char to_bytes[] = { 52, 0, 0, 0, 241, 81, 10, 0, 1, 0, 0, 0, 0, 0, 0, 0, 36, 0, 0, 0, 2, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 184, 11, 183, 116, 0, 12, 0, 0, 0, 1, 0, 0, 0, 1, 0, 112, 0, 28, 178, 81, 236  };
  XTypes::TypeObject to;
  if (!to_type_object(to_bytes, sizeof(to_bytes), to)) {
    throw std::runtime_error("Could not deserialize minimal Type Object 0");
  }
  return to;
}

XTypes::TypeMap OPENDDS_IDL_FILE_SPECIFIC(get_minimal_type_map_private, 0)()
{
  XTypes::TypeMap tm;
  tm[XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(124, 75, 78, 75, 13, 71, 32, 208, 128, 25, 34, 150, 22, 156))] = OPENDDS_IDL_FILE_SPECIFIC(minimal_to, 0)();
  return tm;
}

}

const XTypes::TypeMap& OPENDDS_IDL_FILE_SPECIFIC(get_minimal_type_map, 0)()
{
  static XTypes::TypeMap tm;
  ACE_GUARD_RETURN(ACE_Thread_Mutex, guard, TheServiceParticipant->get_static_xtypes_lock(), tm);
  if (tm.empty()) {
    tm = OPENDDS_IDL_FILE_SPECIFIC(get_minimal_type_map_private, 0)();
  }
  return tm;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

